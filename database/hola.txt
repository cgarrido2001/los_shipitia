holas
que rica cooolaaaaa





# PARA VER LA FECHA SEGUN MI ZONA HORARIA
const moment = require("moment-timezone");
const fecha = moment.tz("2022-09-12T23:39:22.000+00:00", "America/Santiago").format();
console.log(fecha);







que pasa ?

- Personas
    + id => mongo
    + Nombre => string
    + Apellido => string
    + email => string
    + contraseña => string
    + direccion => {}
        * region => string
        * comuma => string
        * calle => string
            # numero => integer
        * depto/casa => string
    + carrito => []
    + productos_fav => []

- Productos
    + ID => MONGO
    + NOMBRE => STRING
    + DESCRIPCION / INGRENDIENTES => STRING / []
    + DISPONIBILIDAD => BOOLEAN
    + VALOR => INTEGER

- CLIENTE (REGISTRO PUEDE SER REALIZADO POR EL ADMINISTRADOR O POR EL PROPIO CLIENTE EL SITIO WEB)
   + RUN
   + NOMBRE COMPLETO
   + DIRECCIÓN
   + COMUNA
   + PROVINCIA
   + REGIÓN
   + FECHA DE NACIMIENTO
   + SEXO
   + CORREO ELECTRONICO (VALIDAR CORREO)
   + NUMERO TELEFONICO
   
  - ENCARGADO DE DESPACHO
   + ID_PRODUCTO => (orden de despacho que tendra) (estas seran entregadas a cocina para su preparacion de acuerdo al orden de despacho)
   + CARRITO_ARREGLO_PRODUCTOS => (Relacion entre el Cliente o Usuario)
   
   
   
   
   
   
   
   
   
   
   
   
   
   Relation Ship

- Template String -> es una definicion.
- Graphql -> Productor de la API.
- MongoDb -> mongoose -> schemas -> operaciones NO SQL  -> find
							-> findById
							-> save
							-> DeleteOne

Resolvers{
	Query{
		async getUsuarios(obj){
			const usuarios = await Usuario.find();
			return Usuarios;
	}



- new mongoose schema ({
	correo: String,
	password: String
}),


	
- Type Usuario {
	id: String!
	correo: String!
	password: String!
},





------------------------------------------------------------------------------------------------°----------------------------------
Clase de Web y Movil 22/8/2022
	
 Type Usuario {
	id: ID!
	correo: String!
	password: String!
	perfil: Perfil
}


Type Perfil{
	id: ID!
	nombre: String!
	usuario: Usuario
}




Tipo de Relaciones (Uno-Uno)

- Entidad Fuerte vs Entidad Debil
- Entidad Debil vs Entidad Fuerte

Como Generar un Schema a partir del RelationShip


new mongoose.schema({
	correo: String,
	pass: String,
	perfil: {type: Schema.ObjectId,  Ref: "Perfil"}
});




Query{
	async getUsuarios(obj){
		const usuarios = await Usuario.find();
		return usuarios;
	}
}

Mutation{
	"By Pass"
	async addUsuario(obj, {input, perfil}){
		const usuario = new Usuario(input, perfil);
		await usuario.save();
		return usuario;
	}
	const perfil = await Perfil.findById({ perfil_id});
	if perfil === null{
		const usuario = new Usuario(input);
		await usuario.save();
		return usuario;
	}else{
		"By Pass"
	}
	
	async updateUsuario(obj, {id, input, perfil}){
		const usuario = await Usuario.findByIdAndUpdate({id, input , perfil});
		return usuario;
	},
	const perfil = await Perfil.findByid({perfil, input});
	if perfil === null{
		const usuario = await Usuario.findIdAndUpdate({id, input});
		return usuario;
	}else{
		"By Pass"
	}
	
}
